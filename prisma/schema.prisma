// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Local development
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// production
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ActivityType {
  LIKE
  FOLLOW
  COMMENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  hasActivity   Boolean?  @default(false)

  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followers     Follow[]   @relation("follower")
  followings    Follow[]   @relation("following")
  activities    Activity[] @relation("activity_performer")
  notifications Activity[] @relation("activity_receiver")

  @@map("users")
}

model Post {
  id      String @id @default(cuid())
  content String @db.Text
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes      Like[]
  comments   Comment[]
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id         String     @id @default(cuid())
  content    String     @db.Text
  userId     String
  postId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower   User       @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following  User       @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([followerId, followingId])
  @@map("follows")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  performerId String
  receiverId  String?
  postId      String?
  commentId   String?
  followId    String?
  content     String?      @db.Text
  createdAt   DateTime     @default(now())

  performer User     @relation("activity_performer", fields: [performerId], references: [id], onDelete: Cascade)
  receiver  User?    @relation("activity_receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  follow    Follow?  @relation(fields: [followId], references: [id], onDelete: Cascade)

  @@map("activities")
}
